
# Bit Flip Mutation
def mutate(self, solution: Tuple[List[int], List[int]]) -> Tuple[List[int], List[int]]:
    route, items = solution
    # Mutate only the items
    for i in range(len(items)):
        if random.random() < self.mutation_rate:
            items[i] = 1 - items[i]  # Flip the bit (0 -> 1, 1 -> 0)
    return route, items

# Random Item Swap Mutation
def mutate(self, solution: Tuple[List[int], List[int]]) -> Tuple[List[int], List[int]]:
    route, items = solution
    # Mutate by swapping two random items
    if random.random() < self.mutation_rate:
        idx1, idx2 = random.sample(range(len(items)), 2)
        items[idx1], items[idx2] = items[idx2], items[idx1]
    return route, items

# Scramble Mutation
def mutate(self, solution: Tuple[List[int], List[int]]) -> Tuple[List[int], List[int]]:
    route, items = solution
    # Mutate by scrambling a random subset of items
    if random.random() < self.mutation_rate:
        start = random.randint(0, len(items) - 2)
        end = random.randint(start + 1, len(items))
        sub_items = items[start:end]
        random.shuffle(sub_items)
        items[start:end] = sub_items
    return route, items

# Inversion Mutation
def mutate(self, solution: Tuple[List[int], List[int]]) -> Tuple[List[int], List[int]]:
    route, items = solution
    # Mutate by reversing a random subset of items
    if random.random() < self.mutation_rate:
        start = random.randint(0, len(items) - 2)
        end = random.randint(start + 1, len(items))
        items[start:end] = items[start:end][::-1]
    return route, items

# Reset Mutation
def mutate(self, solution: Tuple[List[int], List[int]]) -> Tuple[List[int], List[int]]:
    route, items = solution
    # Mutate by resetting a random position with a random value
    if random.random() < self.mutation_rate:
        idx = random.randint(0, len(items) - 1)
        items[idx] = random.choice([0, 1])
    return route, items

# Block Flip Mutation
def mutate(self, solution: Tuple[List[int], List[int]]) -> Tuple[List[int], List[int]]:
    route, items = solution
    # Mutate by flipping bits in a random block of items
    if random.random() < self.mutation_rate:
        start = random.randint(0, len(items) - 2)
        end = random.randint(start + 1, len(items))
        for i in range(start, end):
            items[i] = 1 - items[i]
    return route, items

# Gaussian Mutation
def mutate(self, solution: Tuple[List[int], List[int]]) -> Tuple[List[int], List[int]]:
    route, items = solution
    # Mutate by applying Gaussian perturbation to the bits
    if random.random() < self.mutation_rate:
        for i in range(len(items)):
            if random.random() < self.mutation_rate:
                items[i] = max(0, min(1, items[i] + random.gauss(0, 0.1)))  # Clamping to [0,1]
    return route, items
